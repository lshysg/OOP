from typing import List
from заказ import Заказ
from пицца import ПиццаПепперони, ПиццаБарбекю, ПиццаДарыМоря


class Терминал:
    """Класс Терминал обеспечивает взаимодействие с клиентом."""

    КОМПАНИЯ: str = "Пиццерия #1"
    КОМАНДА_ОТМЕНА_ЗАКАЗА: int = -1
    КОМАНДА_ПОДТВЕРЖДЕНИЕ_ЗАКАЗА: int = 0

    def __init__(self) -> None:
        """Конструктор класса."""
        self.меню: List[Пицца] = [ПиццаПепперони(), ПиццаБарбекю(), ПиццаДарыМоря()]
        self.заказ: Заказ = None
        self.отображать_меню: bool = True

    def __str__(self) -> str:
        """Вернуть строковое представление класса."""
        return f"{self.КОМПАНИЯ}\nДобро пожаловать!"

    def показать_меню(self) -> None:
        """Показать меню."""
        if not self.отображать_меню:
            return

        print(self)
        print("\nМеню:")
        for i, пицца in enumerate(self.меню, 1):
            print(f"{i}. {пицца}")
        print("Для выбора укажите цифру через <ENTER>.")
        print("Для отмены заказа введите -1")
        print("Для подтверждения заказа введите 0")
        self.отображать_меню = False

    def обработать_команду(self, пункт_меню: str) -> None:
        """Обработать действие пользователя."""
        try:
            пункт_меню_int: int = int(пункт_меню)
            if пункт_меню_int == self.КОМАНДА_ОТМЕНА_ЗАКАЗА:
                if self.заказ:
                    print("Заказ отменен.")
                    self.заказ = None
                else:
                    print("Нет активного заказа для отмены.")
            elif пункт_меню_int == self.КОМАНДА_ПОДТВЕРЖДЕНИЕ_ЗАКАЗА:
                if self.заказ:
                    print("Заказ подтвержден.")
                    print(self.заказ)
                    self.принять_оплату()
                    self.заказ.выполнить()
                    self.заказ = None
                else:
                    print("Нет активного заказа для подтверждения.")
            elif 1 <= пункт_меню_int <= len(self.меню):
                if not self.заказ:
                    self.заказ = Заказ()
                пицца: Пицца = self.меню[пункт_меню_int - 1]
                self.заказ.добавить(пицца)
            else:
                raise ValueError
        except ValueError:
            print("Не могу распознать команду! Проверьте ввод.")
        except Exception as e:
            print(f"Во время работы терминала произошла ошибка: {e}")

    def рассчитать_сдачу(self, оплата: float) -> float:
        """Вернуть сдачу для 'оплата'."""
        if оплата < self.заказ.сумма():
            raise ValueError("Недостаточно средств для оплаты заказа.")
        return оплата - self.заказ.сумма()

    def принять_оплату(self) -> None:
        """Обработать оплату."""
        try:
            оплата: float = float(input("Введите сумму: "))
            сдача: float = self.рассчитать_сдачу(оплата)
            print(f"Вы внесли {оплата:.2f} р. Сдача: {сдача:.2f} р.")
        except Exception as e:
            print(f"Оплата не удалась: {e}")
            raise